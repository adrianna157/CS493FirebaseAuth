# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: music-api
# app and org for use with dashboard.serverless.com
app: music-api-app
org: adriannaestelleguevarra

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

plugins:
  - serverless-offline
  - serverless-express

# you can add packaging information here
package:
  #    - include-me-dir/**
  exclude:
    - "postcss.config.js"
    - "firebase.json"
    - "database.rules.json"
    - "public/**"
    - "node_modules/tailwind/**"
    - "node_modules/tailwind-react-ui/**"
    - "node_modules/tailwindcss/**"
    - "node_modules/audio-player/**"
    - "node_modules/react/**"
    - "node_modules/axios/**"
    - "node_modules/postcss-cli/**"
    - "node_modules/postcss-loader/**"
    - "node_modules/serverless/**"
    - "node_modules/serverless-offline/**"
    - "node_modules/react-dom/**"
    - "node_modules/react-is/**"
    - "node_modules/react-lifecycles-compat/**"
    - "node_modules/react-router/**"
    - "node_modules/react-s3/**"
    - "node_modules/react-transition-group/**"
    - "node_modules/react-router-dom/**"
    - "node_modules/@aws-amplify/**"
    - "node_modules/@firebase/**"
    - "node_modules/@material-ui/**"
    - "node_modules/@progress/**"
    - "node_modules/@testing-library/**"
    - "node_modules/bootstrap/**"
    - "node_modules/core-js/**"
    - "node_modules/firebaseauth/**"
    - "node_modules/loadashy/**"
    - "node_modules/react/**"
    - "node_modules/@babel/**"

functions:
  auth:
    handler: /auth.handler
  music-api:
    handler: /handler.musicapi
    events:
      - http:
          method: ANY
          path: /{proxy+}
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: method.request.header.authorization

  logPost:
    handler: /logHandler.logPost
    events:
      - sqs: arn:aws:sqs:us-east-1:466469553065:reporting

  addinglist:
    handler: backend/AddAudio.addinglist
    events:
      - s3:
          bucket: music-storage-cs493192711-dev
          event: s3:ObjectCreated:*
    environment:
      TABLE_NAME: AllSongsTable

  getsonglist:
    handler: backend/Songlist.getsonglist
    events:
      - http:
          path: Audio
          method: get
          cors: true
    environment:
      BUCKET: music-storage-cs493192711-dev
      TABLE_NAME: AllSongsTable

  getsongName:
    handler: backend/Songlist.getsongName
    events:
      - http:
          path: songName
          method: get
          cors: true
    environment:
      BUCKET: music-storage-cs493192711-dev
      TABLE_NAME: AllSongsTable

  newplaylist:
    handler: backend/Customplay.newplaylist
    events:
      - http:
          path: newplaylist
          method: post
          cors: true
    environment:
      BUCKET: music-storage-cs493192711-dev
      TABLE_NAME: Customplaylist

resources:
  Resources:
    contractors:
      Type: AWS::IAM::Role
      Properties:
        RoleName: contractors
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess"
          - "arn:aws:iam::aws:policy/IAMReadOnlyAccess"
          - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
          - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
      
        

    MusicTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "music"

        AttributeDefinitions:
          - AttributeName: "genre"
            AttributeType: S
          - AttributeName: "artist_album_song"
            AttributeType: S
          - AttributeName: "artist"
            AttributeType: S

        KeySchema:
          - AttributeName: "genre"
            KeyType: "HASH"
          - AttributeName: "artist_album_song"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: "artist_gsi"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            KeySchema:
              - AttributeName: "artist"
                KeyType: "HASH"
            Projection:
              ProjectionType: ALL
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
